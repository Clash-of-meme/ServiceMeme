/*
 * Service gestion meme
 * Service permettant de créer des memes et de les récupérer
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;

/**
 * Objet JSON Meme
 */
@ApiModel(description = "Objet JSON Meme")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2016-12-08T07:10:17.438Z")
public class Meme   {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("elo")
  private Integer elo = null;

  @JsonProperty("creation_date")
  private Date creationDate = null;

  @JsonProperty("in_queue")
  private Boolean inQueue = null;

  @JsonProperty("in_match")
  private Boolean inMatch = null;

  @JsonProperty("match_count")
  private Integer matchCount = null;

  @JsonProperty("winrate")
  private Double winrate = null;

  @JsonProperty("login_user")
  private String loginUser = null;

  public Meme id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * ID du meme
   * @return id
  **/
  @ApiModelProperty(value = "ID du meme")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public Meme name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Nom du meme
   * @return name
  **/
  @ApiModelProperty(value = "Nom du meme")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Meme url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL de l'image du meme
   * @return url
  **/
  @ApiModelProperty(value = "URL de l'image du meme")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public Meme elo(Integer elo) {
    this.elo = elo;
    return this;
  }

   /**
   * niveau du meme
   * @return elo
  **/
  @ApiModelProperty(value = "niveau du meme")
  public Integer getElo() {
    return elo;
  }

  public void setElo(Integer elo) {
    this.elo = elo;
  }

  public Meme creationDate(Date creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * date de creation du meme
   * @return creationDate
  **/
  @ApiModelProperty(value = "date de creation du meme")
  public Date getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Date creationDate) {
    this.creationDate = creationDate;
  }

  public Meme inQueue(Boolean inQueue) {
    this.inQueue = inQueue;
    return this;
  }

   /**
   * Decrit si le meme est en recherche de duel
   * @return inQueue
  **/
  @ApiModelProperty(value = "Decrit si le meme est en recherche de duel")
  public Boolean getInQueue() {
    return inQueue;
  }

  public void setInQueue(Boolean inQueue) {
    this.inQueue = inQueue;
  }

  public Meme inMatch(Boolean inMatch) {
    this.inMatch = inMatch;
    return this;
  }

   /**
   * Decrit si le meme est en duel
   * @return inMatch
  **/
  @ApiModelProperty(value = "Decrit si le meme est en duel")
  public Boolean getInMatch() {
    return inMatch;
  }

  public void setInMatch(Boolean inMatch) {
    this.inMatch = inMatch;
  }

  public Meme matchCount(Integer matchCount) {
    this.matchCount = matchCount;
    return this;
  }

   /**
   * Nombre de duel dispute
   * @return matchCount
  **/
  @ApiModelProperty(value = "Nombre de duel dispute")
  public Integer getMatchCount() {
    return matchCount;
  }

  public void setMatchCount(Integer matchCount) {
    this.matchCount = matchCount;
  }

  public Meme winrate(Double winrate) {
    this.winrate = winrate;
    return this;
  }

   /**
   * Pourcentage de victoire
   * @return winrate
  **/
  @ApiModelProperty(value = "Pourcentage de victoire")
  public Double getWinrate() {
    return winrate;
  }

  public void setWinrate(Double winrate) {
    this.winrate = winrate;
  }

  public Meme loginUser(String loginUser) {
    this.loginUser = loginUser;
    return this;
  }

   /**
   * Auteur du meme
   * @return loginUser
  **/
  @ApiModelProperty(value = "Auteur du meme")
  public String getLoginUser() {
    return loginUser;
  }

  public void setLoginUser(String loginUser) {
    this.loginUser = loginUser;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Meme meme = (Meme) o;
    return Objects.equals(this.id, meme.id) &&
        Objects.equals(this.name, meme.name) &&
        Objects.equals(this.url, meme.url) &&
        Objects.equals(this.elo, meme.elo) &&
        Objects.equals(this.creationDate, meme.creationDate) &&
        Objects.equals(this.inQueue, meme.inQueue) &&
        Objects.equals(this.inMatch, meme.inMatch) &&
        Objects.equals(this.matchCount, meme.matchCount) &&
        Objects.equals(this.winrate, meme.winrate) &&
        Objects.equals(this.loginUser, meme.loginUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, url, elo, creationDate, inQueue, inMatch, matchCount, winrate, loginUser);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Meme {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    elo: ").append(toIndentedString(elo)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    inQueue: ").append(toIndentedString(inQueue)).append("\n");
    sb.append("    inMatch: ").append(toIndentedString(inMatch)).append("\n");
    sb.append("    matchCount: ").append(toIndentedString(matchCount)).append("\n");
    sb.append("    winrate: ").append(toIndentedString(winrate)).append("\n");
    sb.append("    loginUser: ").append(toIndentedString(loginUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

